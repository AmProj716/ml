import numpy as np
import matplotlib.pyplot as plt

class Perceptron:
    def __init__(self, learning_rate=0.1, epochs=10):
        self.learning_rate = learning_rate
        self.epochs = epochs
        self.weights = None
        self.bias = None

    def fit(self, X, y):
        # Initialize weights and bias
        self.weights = np.zeros(X.shape[1])
        self.bias = 0

        for _ in range(self.epochs):
            for xi, target in zip(X, y):
                # Calculate linear combination
                linear_output = np.dot(xi, self.weights) + self.bias
                # Apply step function
                y_pred = 1 if linear_output >= 0 else 0
                # Update weights and bias if there is an error
                error = target - y_pred
                self.weights += self.learning_rate * error * xi
                self.bias += self.learning_rate * error

    def predict(self, X):
        # Apply the perceptron output rule
        linear_output = np.dot(X, self.weights) + self.bias
        return np.where(linear_output >= 0, 1, 0)

def plot_decision_boundary(X, y, perceptron, title):
    # Plot data points
    for i, label in enumerate(np.unique(y)):
        plt.scatter(X[y == label][:, 0], X[y == label][:, 1], label=f"Class {label}")

    # Plot the decision boundary
    x_min, x_max = X[:, 0].min() - 0.5, X[:, 0].max() + 0.5
    y_min, y_max = X[:, 1].min() - 0.5, X[:, 1].max() + 0.5
    xx, yy = np.meshgrid(np.linspace(x_min, x_max, 100), np.linspace(y_min, y_max, 100))
    grid = np.c_[xx.ravel(), yy.ravel()]
    Z = perceptron.predict(grid)
    Z = Z.reshape(xx.shape)

    plt.contourf(xx, yy, Z, alpha=0.2, cmap="coolwarm")
    plt.title(title)
    plt.xlabel("Input 1")
    plt.ylabel("Input 2")
    plt.legend()
    plt.show()

# Define input and output for AND gate
X_and = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_and = np.array([0, 0, 0, 1])

# Define input and output for OR gate
X_or = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_or = np.array([0, 1, 1, 1])

# Train and plot decision boundary for AND gate
perceptron_and = Perceptron(learning_rate=0.1, epochs=10)
perceptron_and.fit(X_and, y_and)
print("AND Gate Predictions:")
print(perceptron_and.predict(X_and))
plot_decision_boundary(X_and, y_and, perceptron_and, "AND Gate Decision Boundary")

# Train and plot decision boundary for OR gate
perceptron_or = Perceptron(learning_rate=0.1, epochs=10)
perceptron_or.fit(X_or, y_or)
print("OR Gate Predictions:")
print(perceptron_or.predict(X_or))
plot_decision_boundary(X_or, y_or, perceptron_or, "OR Gate Decision Boundary")
