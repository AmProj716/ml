import numpy as np

class NeuralNetwork:
    def __init__(self, learning_rate=0.1, epochs=10000):
        self.learning_rate = learning_rate
        self.epochs = epochs
        # Initialize weights and biases
        self.weights_input_hidden = np.random.rand(2, 2) - 0.5  # 2x2 matrix for 2 inputs to 2 hidden neurons
        self.bias_hidden = np.random.rand(2) - 0.5  # Bias for 2 hidden neurons
        self.weights_hidden_output = np.random.rand(2, 1) - 0.5  # 2x1 matrix for 2 hidden neurons to 1 output neuron
        self.bias_output = np.random.rand(1) - 0.5  # Bias for output neuron

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def sigmoid_derivative(self, x):
        return x * (1 - x)

    def fit(self, X, y):
        for epoch in range(self.epochs):
            # Forward pass
            # Hidden layer activation
            hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
            hidden_output = self.sigmoid(hidden_input)

            # Output layer activation
            final_input = np.dot(hidden_output, self.weights_hidden_output) + self.bias_output
            final_output = self.sigmoid(final_input)

            # Backward pass
            # Calculate error at the output
            output_error = y - final_output
            output_delta = output_error * self.sigmoid_derivative(final_output)

            # Calculate error at the hidden layer
            hidden_error = output_delta.dot(self.weights_hidden_output.T)
            hidden_delta = hidden_error * self.sigmoid_derivative(hidden_output)

            # Update weights and biases
            self.weights_hidden_output += self.learning_rate * hidden_output.T.dot(output_delta)
            self.bias_output += self.learning_rate * np.sum(output_delta, axis=0)
            self.weights_input_hidden += self.learning_rate * X.T.dot(hidden_delta)
            self.bias_hidden += self.learning_rate * np.sum(hidden_delta, axis=0)

    def predict(self, X):
        # Forward pass to get the final output
        hidden_input = np.dot(X, self.weights_input_hidden) + self.bias_hidden
        hidden_output = self.sigmoid(hidden_input)
        final_input = np.dot(hidden_output, self.weights_hidden_output) + self.bias_output
        final_output = self.sigmoid(final_input)
        return final_output >= 0.5  # Apply threshold to convert probabilities to binary output (0 or 1)

# Define input and output for XOR gate
X_xor = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y_xor = np.array([[0], [1], [1], [0]])

# Initialize and train the neural network
nn_xor = NeuralNetwork(learning_rate=0.1, epochs=10000)
nn_xor.fit(X_xor, y_xor)

# Test the network
# Test the network
print("XOR Gate Predictions:")
predictions = nn_xor.predict(X_xor)
for i, prediction in enumerate(predictions):
    print(f"Input: {X_xor[i]}, Predicted Output: {int(prediction[0])}")

